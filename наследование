#include <iostream>
#include <locale.h>
#include <cstring>

using namespace std;

class String
{
private:
	char *string1;
	int length;

protected:
	void set_string(char * string1)
	{
		if (string1 == NULL)
		{
			cout << "Создана пустая строка" << endl;
			string1 = new char;
			string1[0] = '\0';
		}
		else this->string1 = string1;
	}

	void set_length(int length)
	{
		this->length = length;
	}

	char * get_string()
	{
		return string1;
	}

public:
	String()
	{
		set_length(0);
		string1 = new char;
		string1[0] = '\0';
		cout << "String: сработал конструктор без параметров" << endl;
	}

	String(char *String)
	{
		delete string1;
		string1 = new char[strlen(String) + 1];
		length = strlen(String);
		strcpy_s(string1, strlen(String) + 1, String);
		cout << "String: сработал конструктор с параметрами" << endl;
	}

	String(char c)
	{
		this->length = 1;
		string1 = new char;
		string1[0] = c;
		cout << "String: вызван конструктор с параметрами" << endl;
	}

	String(String & string2)
	{
		static int k = 0;
		length = string2.length;
		string1 = string2.string1;
		k++;
		cout << "String: конструктор копирования сработал " << k << " раз" << endl;
	}

	~String()
	{
		delete[] this->string1;
		cout << "String: вызван деструктор" << endl;
	}

	int get_length()
	{
		return this->length;
	}

	char *  get_string1()
	{
		return this->string1;
	}

	String& operator = (const String& other)
	{
		this->string1 = other.string1;
		this->length = other.length;
		return *this;
	}

	ostream& operator << (ostream& out)
	{
		if (*string1 != '\0')
			if (length == 1)
				out << *string1;
			else out << string1;
		else cout << "Строка пуста" << endl;
		return out;
	}

};

class ID_String : public String
{
private:
	char* string1;
	int length;

public:
	ID_String()
	{
		this->string1 = nullptr;
		this->length = 0;
		cout << "ID_String: вызван конструктор без параметров" << endl;
	}

	ID_String(char * c)
	{
		int i;
		this->string1 = c;
		this->length = 0;

		for (i = 0; this->string1[i] != '\0'; i++)
		{
			if (!(this->string1[i] > 64 && this->string1[i] < 91 || this->string1[i] > 96 && this->string1[i] < 123) && (i == 0 && !(this->string1[i] > 47 && this->string1[i] < 58)))
			{
				this->string1 = nullptr;
				this->length = 0;
				break;
			} this->length++;

		} cout << "ID_String: вызван конструктор с параметрами (символ)" << endl;

	}

	~ID_String()
	{
		this->length = 0;
		delete[] this->string1;
		cout << "ID_String: вызван деструктор" << endl;
	}

	ID_String& operator = (const ID_String& other)
	{
		this->string1 = other.string1;
		this->length = other.length;
		return *this;
	}

	bool operator > (const ID_String& other)
	{
		return this->length > other.length;
	}

	bool operator < (const ID_String& other)
	{
		return this->length < other.length;
	}

	int find_last(char c)
	{
		int i, j;
		char *string1 = nullptr;

		if (this->string1 == nullptr)
			return 0;
		else
		{
			for (i = 0; i < this->length; i++)
			if (this->string1[i] == c)
				j = i;
			return j;

		}
	}
};

class Des_String : public String
{
private:
	char *string1;
	int length;

public:

	Des_String()
	{
		this->string1 = nullptr;
		this->length = 0;
		cout << "Des_String: вызван конструктор без параметров" << endl;
	}

	Des_String(char * des)
	{
		int i = 0;
		char * des_s;

		if (!(des[0] == '-' || des[0] == '+' || des[0] >= '0' || des[0] <= 9))
		{
			delete get_string();
			des_s = new char;
			des_s[0] = '0';
			set_string(des_s);
			this->length = 1;
			cout << "класс Des_string: сработал конструктор с параметрами, принято нулевое значение (1)" << endl;

		}
		else { ; i++; }
		for (int j = 1; j < strlen(des); j++)
		{
			if (des[j] >= '0' || des[j] <= '9') { i++; }
		}
		if (i == strlen(des))
		{
			delete get_string();
			des_s = new char[strlen(des) + 1];
			strcpy_s(des_s, strlen(des) + 1, des);
			set_string(des_s);
			this->length = i;
			cout << "Des_String: сработал конструктор с параметрами" << endl;
		}
		else
		{
			des_s = new char;
			*des_s = '0';
			set_string(des_s);
			this->length = 1;
			cout << "Des_String: сработал конструктор с параметрами, принято нулевое значение (2)" << endl;
		}

	}

	Des_String(const Des_String& other)
	{
		int i;
		char *temp = new char[other.length + 1];

		for (i = 0; other.string1[i] != '\0'; i++)
			temp[i] = other.string1[i];
		temp[i] = '\0';
		this->string1 = temp;
		this->length = other.length;
		cout << "Des_String: вызван конструктор копирования" << endl;
	}

	~Des_String()
	{
		this->length = 0;
		delete[] this->string1;
		cout << "Des_String: вызван деструктор" << endl;
	}

	Des_String& operator = (const Des_String& other)
	{
		this->string1 = other.string1;
		this->length = other.length;
		return *this;
	}

	bool int_opr()
	{
		char* string1 = get_string();
		int l = get_length(), chislo;
		if (string1[0] == '+')
		{
			l--;
			if (l > 5) return false;
			else if ((chislo = atoi(string1)) > 32676) return false;
			else return true;
		}
		else if (string1[0] == '-')
		{
			l--;
			if (l > 10) return false;
			else if ((chislo = atoi(string1)) < (-32676)) return false;
			else return true;
		}

	}

	int operator - (Des_String str)
	{
		char * str1 = get_string(), *str2 = str.get_string();
		int a, b;
		a = atoi(str1);
		b = atoi(str2);
		return (a - b);
	}

	bool operator > (const Des_String& other)
	{
		return this->length > other.length;
	}


};

int main()
{
	setlocale(LC_ALL, "Russian");
	char menu;
	int n = 0, i = 0, k1 = 0, k2 = 0;
	String ** strings = nullptr;
	do
	{
		system("CLS");
		cout << "1. Инициализация" << endl << "2. Тестирование" << endl << "3. Выход" << endl;
		cin >> menu;
		getchar();
		switch (menu)
		{
		case '1':
			system("CLS");
			menu = 0;
			cout << "1. Число элементов" << endl << "2. Начальное значение" << endl;
			cin >> menu;
			switch (menu)
			{
			case'1':
				if (n == 0)
				{
					cout << "Введите число элементов: " << endl;
					cin >> n;
					strings = new String *[n];
				}
				else
				{
					cout << "Число элементов уже введено" << endl;
					getchar();
				}
					
				break ;
			case '2':
				if (n == 0)
				{
					cout << "Пункт меню недоступен, число элементов еще не введено" << endl;
					getchar();
					break;
				}
				i = 0;
				char *input = new char[100];
				while (i < n)
				{
					menu = 0;
					*input = NULL;
					cout << "Введите значение элемента №" << i + 1 << endl;
					getchar();
					gets_s(input, 100);
					cout << "Выберите тип элемента" << endl;
					cout << "1. Строка" << endl << "2. Строка-идентификатор" << endl << "3. Десятичная строка" << endl;
					cin >> menu;
					switch (menu)
					{
					case'1':
						strings[i] = new String(input);
						break;
					case '2':
						strings[i] = new ID_String(input);
						break;
					case'3':
						strings[i] = new Des_String(input);
						break;
					default:
						strings[i] = new String();
						break;
					}
					menu = 0;
					i++;
				}
				break;
			}
			menu = 0;
			getchar();
			break;
		case '2':
			system("CLS");
			menu = 0;
			if (n == 0)
			{
				cout << "Число элементов еще не введено, этот пункт меню пока не доступен" << endl;
				break;
			}
			cout << "1. Строка" << endl << "2. Строка-идентификатор" << endl << "3. Десятичная строка" << endl << "4. Задать операнды" << endl<<"5. Назад"<<endl;
			cin >> menu;
			switch (menu)
			{
			case '1':
				system("CLS");
				menu = 0;
				cout << "1. Вывод элемента" << endl << "2. Вывод длины элемента" << endl;
				cin >> menu;
				switch (menu)
				{
				case '1':
					i = 0;
					cout << "Введите номер элемента" << endl;
					cin >> i;
					if ((i <= n) && (i > 0))
						*strings[i - 1] << cout;

					else
						cout << "Неверный номер элемента" << endl;
					break;
				case '2':
					i = 0;
					cout << "Введите номер элемента" << endl;
					cin >> i;
					if ((i <= n) && (i > 0))
						cout << strings[i - 1]->get_length();
					else
						cout << "Неверный номер элемента" << endl;
					break;
				}
				menu = 0;
				getchar();
				break;
			case '2':
				system("CLS");
				menu = 0;
				cout << "1. Вывод элемента" << endl << "2. Вывод длины элемента" << endl;
				cin >> menu;
				switch (menu)
				{
				case '1':
					i = 0;
					cout << "Введите номер элемента" << endl;
					cin >> i;
					if ((i <= n) && (i > 0))
						*strings[i - 1] << cout;
					else cout << "Введен неверный номер элемента" << endl;
					break;
				case '2':
					i = 0;
					cout << "Введите номер элемента" << endl;
					cin >> i;
					if ((i <= n) && (i > 0))
						cout << strings[i - 1]->get_length();
					else cout << "Введен неверный номер элемента" << endl;
					break;
				}
				menu = 0;
				getchar();
				break;
			case '4':
				system("CLS");
				menu = 0;
				cout << "1. Поиск последнего вхождения символа в строку" << endl;
				cout << "2. Сравнение чисел" << endl;
				cout << "3. Проверка: можно ли представить число в формате int" << endl;
				cout << "4. Присвоение строке типа String значения другой строки этого типа" << endl;
				cout << "5. Присвоение строке типа String_Id значения другой строки этого типа" << endl;
				cout << "6. Присвоение строке типа Des_string значения другой строки этого типа" << endl;
				cout << "7. Получение разности двух чисел " << endl;
				cin >> menu;
				switch (menu)
				{
				case '1':
					cout << "Введите символ, последнее вхождение которого необходимо найти" << endl;
					cout << "Последнее вхождение это " << ((ID_String*)strings[i])->find_last(getchar());
					break;
				case '2':
					cout << "Введите номер первой строки" << endl;
					cin >> k1;
					cout << "Введите номер второй строки" << endl;
					cin >> k2;
					*(Des_String*)strings[k1 - 1] > *(Des_String*)strings[k2 - 1];
					break;
				case '3':
					cout << "Введите номер строки:" << endl;
					cin >> k1;
					if ((*(Des_String*)strings[k1 - 1]).int_opr()) cout << "Число может быть представлено как int" << endl;
					else cout << "Число не может быть представлено как тип int" << endl;
					break;
				case '4':
					cout << "Введите номер первой строки" << endl;
					cin >> k1;
					cout << "Введите номер второй строки" << endl;
					cin >> k2;
					*strings[k1 - 1] = *(String*)strings[k2 - 1];
					break;
				case '5':
					cout << "Введите номер первой строки" << endl;
					cin >> k1;
					cout << "Введите номер второй строки" << endl;
					cin >> k2;
					*strings[k1 - 1] = *(ID_String*)strings[k2 - 1];
					break;
				case '6':
					cout << "Введите номер первой строки" << endl;
					cin >> k1;
					cout << "Введите номер второй строки" << endl;
					cin >> k2;
					*strings[k1 - 1] = *(Des_String*)strings[k2 - 1];
					break;
				case '7':
					cout << "Введите номер первой строки" << endl;
					cin >> k1;
					cout << "Введите номер второй строки" << endl;
					cin >> k2;
					cout << "Результат: " << *(Des_String*)strings[k1 - 1] - *(Des_String*)strings[k2 - 1] << endl;
					break;
				}
				while (menu != '5');
				menu = 0;
				getchar();
				break;

			}
			menu = 0;
			getchar();
			break;
		}
		getchar();

	} while (menu != '3');

	return 0;
}
